package com.example.mobilecomputingassignment.domain.models

import java.util.Date

/**
 * Domain Model: Event
 * 
 * This is the core business model for an event in our app.
 * It represents a sports watch-along event that users can host or join.
 * 
 * Key Concepts:
 * - Domain Models: These are the business logic models that don't depend on external libraries
 * - Data Classes: Kotlin's way of creating classes that primarily hold data
 * - Nullable Types: The '?' means the field can be null (optional)
 * 
 * Firebase Mapping:
 * This model gets converted to/from Firebase Firestore documents via EventDto
 */
data class Event(
        // Unique identifier for the event (auto-generated by Firebase)
        val id: String = "",
        
        // User who created/hosts this event
        val hostUserId: String = "",
        val hostUsername: String = "",
        
        // Event timing
        val date: Date = Date(),           // When the event takes place
        val checkInTime: Date = Date(),    // When attendees should arrive (usually 30min before match)
        
        // Associated AFL match details
        val matchId: String = "",          // ID from Squiggle API
        val matchDetails: MatchDetails? = null,  // Full match information
        
        // Location information
        val location: EventLocation = EventLocation(),
        
        // Event capacity and contact
        val capacity: Int = 0,             // Maximum number of attendees
        val contactNumber: String = "",    // Host's contact number
        
        // Venue features (boolean flags)
        val amenities: EventAmenities = EventAmenities(),      // General venue features
        val accessibility: EventAccessibility = EventAccessibility(),  // Accessibility features
        
        // User participation tracking - // keep legacy single-attendee string so nothing else explodes
        val attendees: String = "",        // Currently checked-in user ID (single attendee model)
        // ðŸ”¸ NEW: surface the counter to the UI
        val attendeesCount: Long = 0L,

        val interestedUsers: List<String> = emptyList(),  // Users who showed interest
        
        // Metadata for tracking
        val createdAt: Date = Date(),      // When event was created
        val updatedAt: Date = Date(),      // When event was last modified
        val isActive: Boolean = true,      // Soft delete flag (false = deleted)
        val volume: Int = 1               // Volume level for the event
) {
  /**
   * Computed Properties
   * 
   * These are properties that are calculated on-the-fly rather than stored.
   * They automatically generate the event title and description based on match details.
   */
  
  // Auto-generates event title from match details (e.g., "GWS vs St Kilda - Sydney Showground")
  val title: String
    get() =
            matchDetails?.let { match -> "${match.homeTeam} vs ${match.awayTeam} - ${match.venue}" }
                    ?: location.name.ifEmpty { "Watch Along Event" }

  // Auto-generates event description from match details (e.g., "AFL Round 24 at Sydney Showground")
  val description: String
    get() =
            matchDetails?.let { match -> "${match.competition} ${match.round} at ${match.venue}" }
                    ?: "Join us for a sports watch along!"
}

/**
 * Event Location Model
 * 
 * Represents the physical location where the event takes place.
 * Contains both human-readable address and GPS coordinates for mapping.
 */
data class EventLocation(
        val name: String = "",        // Venue name (e.g., "Sydney Showground")
        val address: String = "",     // Full address (e.g., "1 Showground Rd, Sydney Olympic Park")
        val latitude: Double = 0.0,   // GPS latitude coordinate
        val longitude: Double = 0.0   // GPS longitude coordinate
)

/**
 * Event Amenities Model
 * 
 * Represents the available facilities and features at the event venue.
 * These are boolean flags that users can filter events by.
 */
data class EventAmenities(
        val isIndoor: Boolean = false,      // Indoor venue (protected from weather)
        val isOutdoor: Boolean = false,     // Outdoor venue (open air)
        val isChildFriendly: Boolean = false, // Suitable for children
        val isPetFriendly: Boolean = false,   // Pets allowed
        val hasParking: Boolean = false,    // Parking available
        val hasFood: Boolean = false,       // Food available for purchase
        val hasToilet: Boolean = false,     // Toilet facilities available
        val hasWifi: Boolean = false        // WiFi internet access
)

/**
 * Event Accessibility Model
 * 
 * Represents accessibility features available at the event venue.
 * These help users with disabilities find suitable events.
 */
data class EventAccessibility(
        val isWheelchairAccessible: Boolean = false,  // Wheelchair ramps/access
        val hasAccessibleToilets: Boolean = false,    // Disabled toilet facilities
        val hasAccessibleParking: Boolean = false,    // Disabled parking spaces
        val hasSignLanguageSupport: Boolean = false,  // Sign language interpreter
        val hasAudioSupport: Boolean = false          // Audio description/assistance
)

/**
 * Match Details Model
 * 
 * Represents information about the AFL match associated with this event.
 * This data comes from the Squiggle API (official AFL data source).
 */
data class MatchDetails(
        val id: String = "",           // Unique match ID from Squiggle API
        val homeTeam: String = "",     // Home team name (e.g., "Greater Western Sydney")
        val awayTeam: String = "",     // Away team name (e.g., "St Kilda")
        val competition: String = "",  // Competition name (e.g., "AFL")
        val venue: String = "",        // Stadium name (e.g., "Sydney Showground")
        val matchTime: Date = Date(),  // When the match starts
        val round: String = "",        // Round name (e.g., "Round 24")
        val season: Int = 2025         // Season year
)
