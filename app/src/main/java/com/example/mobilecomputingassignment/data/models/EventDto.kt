package com.example.mobilecomputingassignment.data.models

import com.example.mobilecomputingassignment.domain.models.*
import com.google.firebase.Timestamp
import com.google.firebase.firestore.PropertyName

/**
 * Data Transfer Objects (DTOs) for Firebase Firestore
 *
 * These classes are specifically designed to work with Firebase Firestore. They handle the
 * conversion between our domain models and Firebase's data format.
 *
 * Key Differences from Domain Models:
 * - Use Firebase Timestamp instead of Java Date
 * - Field names match exactly what's stored in Firestore
 * - Include conversion methods to/from domain models
 *
 * Firebase Firestore:
 * - NoSQL document database
 * - Documents are stored as JSON-like objects
 * - Timestamps are stored in a special Firebase format
 */

/**
 * Main Event DTO - represents an event document in Firebase Firestore
 *
 * This is the exact structure that gets stored in the 'events' collection in Firestore. Each field
 * corresponds to a property in the Firestore document.
 */
data class EventDto(
        // Document ID (auto-generated by Firestore)
        val id: String = "",

        // Host information
        val hostUserId: String = "", // Firebase Auth user ID
        val hostUsername: String = "", // Display name of the host

        // Event timing (Firebase Timestamp format)
        val date: Timestamp = Timestamp.now(), // When event occurs
        val checkInTime: Timestamp = Timestamp.now(), // When to arrive

        // Match association
        val matchId: String = "", // Squiggle API match ID
        val matchDetails: MatchDetailsDto? = null, // Full match information

        // Location and capacity
        val location: EventLocationDto = EventLocationDto(),
        val capacity: Int = 0, // Maximum attendees
        val contactNumber: String = "", // Host contact

        // Venue features
        val amenities: EventAmenitiesDto = EventAmenitiesDto(),
        val accessibility: EventAccessibilityDto = EventAccessibilityDto(),

        // User participation
        val attendees: String = "", // Currently checked-in user ID
        val interestedUsers: List<String> = emptyList(), // Users who showed interest

        // Metadata
        val createdAt: Timestamp = Timestamp.now(), // Document creation time
        val updatedAt: Timestamp = Timestamp.now(), // Last modification time
        @get:PropertyName("isActive")
        @set:PropertyName("isActive")
        var isActive: Boolean = true, // Soft delete flag
        val volume: Int = 1 // Event volume level
) {
  /**
   * Conversion Methods
   *
   * These methods convert between Firebase DTOs and Domain Models. This is part of the Clean
   * Architecture pattern - keeping data layer separate from business logic.
   */

  // Converts this Firebase DTO to a Domain Model (for business logic)
  fun toDomain(): Event {
    return Event(
            id = id,
            hostUserId = hostUserId,
            hostUsername = hostUsername,
            date = date.toDate(),
            checkInTime = checkInTime.toDate(),
            matchId = matchId,
            matchDetails = matchDetails?.toDomain(),
            location = location.toDomain(),
            capacity = capacity,
            contactNumber = contactNumber,
            amenities = amenities.toDomain(),
            accessibility = accessibility.toDomain(),
            attendees = attendees,
            interestedUsers = interestedUsers,
            createdAt = createdAt.toDate(),
            updatedAt = updatedAt.toDate(),
            isActive = isActive,
            volume = volume
    )
  }

  companion object {
    // Converts a Domain Model to a Firebase DTO (for storage)
    fun fromDomain(event: Event): EventDto {
      return EventDto(
              id = event.id,
              hostUserId = event.hostUserId,
              hostUsername = event.hostUsername,
              date = Timestamp(event.date),
              checkInTime = Timestamp(event.checkInTime),
              matchId = event.matchId,
              matchDetails = event.matchDetails?.let { MatchDetailsDto.fromDomain(it) },
              location = EventLocationDto.fromDomain(event.location),
              capacity = event.capacity,
              contactNumber = event.contactNumber,
              amenities = EventAmenitiesDto.fromDomain(event.amenities),
              accessibility = EventAccessibilityDto.fromDomain(event.accessibility),
              attendees = event.attendees,
              interestedUsers = event.interestedUsers,
              createdAt = Timestamp(event.createdAt),
              updatedAt = Timestamp(event.updatedAt),
              isActive = event.isActive,
              volume = event.volume
      )
    }
  }
}

data class EventLocationDto(
        val name: String = "",
        val address: String = "",
        val latitude: Double = 0.0,
        val longitude: Double = 0.0
) {
  fun toDomain(): EventLocation {
    return EventLocation(name, address, latitude, longitude)
  }

  companion object {
    fun fromDomain(location: EventLocation): EventLocationDto {
      return EventLocationDto(
              location.name,
              location.address,
              location.latitude,
              location.longitude
      )
    }
  }
}

data class EventAmenitiesDto(
        val isIndoor: Boolean = false,
        val isOutdoor: Boolean = false,
        val isChildFriendly: Boolean = false,
        val isPetFriendly: Boolean = false,
        val hasParking: Boolean = false,
        val hasFood: Boolean = false,
        val hasToilet: Boolean = false,
        val hasWifi: Boolean = false
) {
  fun toDomain(): EventAmenities {
    return EventAmenities(
            isIndoor,
            isOutdoor,
            isChildFriendly,
            isPetFriendly,
            hasParking,
            hasFood,
            hasToilet,
            hasWifi
    )
  }

  companion object {
    fun fromDomain(amenities: EventAmenities): EventAmenitiesDto {
      return EventAmenitiesDto(
              amenities.isIndoor,
              amenities.isOutdoor,
              amenities.isChildFriendly,
              amenities.isPetFriendly,
              amenities.hasParking,
              amenities.hasFood,
              amenities.hasToilet,
              amenities.hasWifi
      )
    }
  }
}

data class EventAccessibilityDto(
        val isWheelchairAccessible: Boolean = false,
        val hasAccessibleToilets: Boolean = false,
        val hasAccessibleParking: Boolean = false,
        val hasSignLanguageSupport: Boolean = false,
        val hasAudioSupport: Boolean = false
) {
  fun toDomain(): EventAccessibility {
    return EventAccessibility(
            isWheelchairAccessible,
            hasAccessibleToilets,
            hasAccessibleParking,
            hasSignLanguageSupport,
            hasAudioSupport
    )
  }

  companion object {
    fun fromDomain(accessibility: EventAccessibility): EventAccessibilityDto {
      return EventAccessibilityDto(
              accessibility.isWheelchairAccessible,
              accessibility.hasAccessibleToilets,
              accessibility.hasAccessibleParking,
              accessibility.hasSignLanguageSupport,
              accessibility.hasAudioSupport
      )
    }
  }
}

data class MatchDetailsDto(
        val id: String = "",
        val homeTeam: String = "",
        val awayTeam: String = "",
        val competition: String = "",
        val venue: String = "",
        val matchTime: Timestamp = Timestamp.now(),
        val round: String = "",
        val season: Int = 2025
) {
  fun toDomain(): MatchDetails {
    return MatchDetails(
            id,
            homeTeam,
            awayTeam,
            competition,
            venue,
            matchTime.toDate(),
            round,
            season
    )
  }

  companion object {
    fun fromDomain(match: MatchDetails): MatchDetailsDto {
      return MatchDetailsDto(
              match.id,
              match.homeTeam,
              match.awayTeam,
              match.competition,
              match.venue,
              Timestamp(match.matchTime),
              match.round,
              match.season
      )
    }
  }
}